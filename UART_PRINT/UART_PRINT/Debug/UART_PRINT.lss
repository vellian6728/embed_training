
UART_PRINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000003e6  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800132  00800132  000004ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000df2  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b0  00000000  00000000  000013a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000593  00000000  00000000  00001c56  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000021ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000057c  00000000  00000000  00002875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 3b       	cpi	r26, 0xB6	; 182
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "uart_hal.h"

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	a8 97       	sbiw	r28, 0x28	; 40
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
  ba:	4a e0       	ldi	r20, 0x0A	; 10
  bc:	be 01       	movw	r22, r28
  be:	6f 5f       	subi	r22, 0xFF	; 255
  c0:	7f 4f       	sbci	r23, 0xFF	; 255
  c2:	83 e2       	ldi	r24, 0x23	; 35
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 8b 01 	call	0x316	; 0x316 <__itoa_ncheck>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
  ca:	2a e0       	ldi	r18, 0x0A	; 10
  cc:	ae 01       	movw	r20, r28
  ce:	4b 5e       	subi	r20, 0xEB	; 235
  d0:	5f 4f       	sbci	r21, 0xFF	; 255
  d2:	62 ed       	ldi	r22, 0xD2	; 210
  d4:	72 e0       	ldi	r23, 0x02	; 2
  d6:	86 e9       	ldi	r24, 0x96	; 150
  d8:	99 e4       	ldi	r25, 0x49	; 73
  da:	0e 94 96 01 	call	0x32c	; 0x32c <__ltoa_ncheck>
	itoa(Temp1,buffer1,10);
	ltoa(Lval1,buffer2,10);

	
	
	flush_uart_buffer();
  de:	0e 94 2d 01 	call	0x25a	; 0x25a <flush_uart_buffer>
	//uart_init(1000000,1); // 1Mbps - double speed not working in putty - xxxxxxxxxxxxxxxxxxxxxxxxxx
	uart_init(500000,1); // 0.5 Mbps - double speed - working - High speed 0.5 * 2 = 1Mbps - 400 times fasster than the available low speed.
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	60 e2       	ldi	r22, 0x20	; 32
  e6:	71 ea       	ldi	r23, 0xA1	; 161
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 ee 00 	call	0x1dc	; 0x1dc <uart_init>
	//uart_init(2400,0); //2.4Kbps - single speed - working - Lowest speed
	//uart_init(9600,0); //9.6Kbps - single speed - working
	//uart_init(19200,1); //19.2Kbps - double speed  - working

	sei();
  f0:	78 94       	sei
	uart_send_string_char("Program Start ...\n\r");
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	while(1)
	{
		
	uart_send_string_char("Temperature = ");
  fa:	85 e1       	ldi	r24, 0x15	; 21
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	uart_send_string_char(buffer1);
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	uart_send_string_char("\n\r");
 10a:	82 e1       	ldi	r24, 0x12	; 18
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	
	uart_send_string_char("Long value = ");
 112:	84 e2       	ldi	r24, 0x24	; 36
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	uart_send_string_char(buffer2);	
 11a:	ce 01       	movw	r24, r28
 11c:	45 96       	adiw	r24, 0x15	; 21
 11e:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	uart_send_string_char("\n\r");
 122:	82 e1       	ldi	r24, 0x12	; 18
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	2f ef       	ldi	r18, 0xFF	; 255
 12c:	83 ed       	ldi	r24, 0xD3	; 211
 12e:	90 e3       	ldi	r25, 0x30	; 48
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0x8a>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0x94>
 13a:	00 00       	nop
	_delay_ms(1000);
	uart_send_string_char("\n\r");
 13c:	82 e1       	ldi	r24, 0x12	; 18
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
	uart_send_string_char("\n\r");
 144:	82 e1       	ldi	r24, 0x12	; 18
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 41 01 	call	0x282	; 0x282 <uart_send_string_char>
 14c:	d6 cf       	rjmp	.-84     	; 0xfa <main+0x54>

0000014e <__vector_18>:

void uart_send_array_char(char *c,uint16_t len){
	for(uint16_t i = 0; i < len;i++){
		uart_send_byte_char(c[i]);
	}
}
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	ef 93       	push	r30
 15e:	ff 93       	push	r31
 160:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 164:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <__data_end+0x1>
 168:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 16c:	ea 5c       	subi	r30, 0xCA	; 202
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 83       	st	Z, r24
 172:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_count>
 176:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <rx_count+0x1>
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <rx_count+0x1>
 180:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rx_count>
 184:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 188:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x1>
 192:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end>
 196:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <__data_end>
 19a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <__data_end+0x1>
 19e:	80 38       	cpi	r24, 0x80	; 128
 1a0:	91 05       	cpc	r25, r1
 1a2:	20 f0       	brcs	.+8      	; 0x1ac <__vector_18+0x5e>
 1a4:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x1>
 1a8:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_20>:
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	8f 93       	push	r24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <uart_init>:
 1dc:	44 23       	and	r20, r20
 1de:	39 f0       	breq	.+14     	; 0x1ee <uart_init+0x12>
 1e0:	e0 ec       	ldi	r30, 0xC0	; 192
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	20 81       	ld	r18, Z
 1e6:	22 60       	ori	r18, 0x02	; 2
 1e8:	20 83       	st	Z, r18
 1ea:	a8 e0       	ldi	r26, 0x08	; 8
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <uart_init+0x14>
 1ee:	a0 e1       	ldi	r26, 0x10	; 16
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	9b 01       	movw	r18, r22
 1f4:	ac 01       	movw	r20, r24
 1f6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <__muluhisi3>
 1fa:	9b 01       	movw	r18, r22
 1fc:	ac 01       	movw	r20, r24
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	74 e2       	ldi	r23, 0x24	; 36
 202:	84 ef       	ldi	r24, 0xF4	; 244
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 4f 01 	call	0x29e	; 0x29e <__udivmodsi4>
 20a:	ba 01       	movw	r22, r20
 20c:	a9 01       	movw	r20, r18
 20e:	41 50       	subi	r20, 0x01	; 1
 210:	51 09       	sbc	r21, r1
 212:	61 09       	sbc	r22, r1
 214:	71 09       	sbc	r23, r1
 216:	db 01       	movw	r26, r22
 218:	ca 01       	movw	r24, r20
 21a:	88 27       	eor	r24, r24
 21c:	9f 70       	andi	r25, 0x0F	; 15
 21e:	aa 27       	eor	r26, r26
 220:	bb 27       	eor	r27, r27
 222:	89 2f       	mov	r24, r25
 224:	9a 2f       	mov	r25, r26
 226:	ab 2f       	mov	r26, r27
 228:	bb 27       	eor	r27, r27
 22a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 22e:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 232:	e1 ec       	ldi	r30, 0xC1	; 193
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 6d       	ori	r24, 0xD8	; 216
 23a:	80 83       	st	Z, r24
 23c:	e2 ec       	ldi	r30, 0xC2	; 194
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	86 60       	ori	r24, 0x06	; 6
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <uart_send_byte>:
 248:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24c:	99 23       	and	r25, r25
 24e:	e1 f3       	breq	.-8      	; 0x248 <uart_send_byte>
 250:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 254:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 258:	08 95       	ret

0000025a <flush_uart_buffer>:
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	fc 01       	movw	r30, r24
 260:	ea 5c       	subi	r30, 0xCA	; 202
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	10 82       	st	Z, r1
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	80 38       	cpi	r24, 0x80	; 128
 26a:	91 05       	cpc	r25, r1
 26c:	c1 f7       	brne	.-16     	; 0x25e <flush_uart_buffer+0x4>
 26e:	08 95       	ret

00000270 <uart_send_byte_char>:
 270:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 274:	99 23       	and	r25, r25
 276:	e1 f3       	breq	.-8      	; 0x270 <uart_send_byte_char>
 278:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 27c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 280:	08 95       	ret

00000282 <uart_send_string_char>:

void uart_send_string_char(char *c){
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
	uint16_t i = 0;
	do{
		uart_send_byte_char(c[i]);
 288:	89 91       	ld	r24, Y+
 28a:	0e 94 38 01 	call	0x270	; 0x270 <uart_send_byte_char>
		i++;
		
	}while(c[i] != '\0');
 28e:	88 81       	ld	r24, Y
 290:	81 11       	cpse	r24, r1
 292:	fa cf       	rjmp	.-12     	; 0x288 <uart_send_string_char+0x6>
	uart_send_byte(c[i]);
 294:	0e 94 24 01 	call	0x248	; 0x248 <uart_send_byte>
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	08 95       	ret

0000029e <__udivmodsi4>:
 29e:	a1 e2       	ldi	r26, 0x21	; 33
 2a0:	1a 2e       	mov	r1, r26
 2a2:	aa 1b       	sub	r26, r26
 2a4:	bb 1b       	sub	r27, r27
 2a6:	fd 01       	movw	r30, r26
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <__udivmodsi4_ep>

000002aa <__udivmodsi4_loop>:
 2aa:	aa 1f       	adc	r26, r26
 2ac:	bb 1f       	adc	r27, r27
 2ae:	ee 1f       	adc	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	a2 17       	cp	r26, r18
 2b4:	b3 07       	cpc	r27, r19
 2b6:	e4 07       	cpc	r30, r20
 2b8:	f5 07       	cpc	r31, r21
 2ba:	20 f0       	brcs	.+8      	; 0x2c4 <__udivmodsi4_ep>
 2bc:	a2 1b       	sub	r26, r18
 2be:	b3 0b       	sbc	r27, r19
 2c0:	e4 0b       	sbc	r30, r20
 2c2:	f5 0b       	sbc	r31, r21

000002c4 <__udivmodsi4_ep>:
 2c4:	66 1f       	adc	r22, r22
 2c6:	77 1f       	adc	r23, r23
 2c8:	88 1f       	adc	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	1a 94       	dec	r1
 2ce:	69 f7       	brne	.-38     	; 0x2aa <__udivmodsi4_loop>
 2d0:	60 95       	com	r22
 2d2:	70 95       	com	r23
 2d4:	80 95       	com	r24
 2d6:	90 95       	com	r25
 2d8:	9b 01       	movw	r18, r22
 2da:	ac 01       	movw	r20, r24
 2dc:	bd 01       	movw	r22, r26
 2de:	cf 01       	movw	r24, r30
 2e0:	08 95       	ret

000002e2 <__muluhisi3>:
 2e2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__umulhisi3>
 2e6:	a5 9f       	mul	r26, r21
 2e8:	90 0d       	add	r25, r0
 2ea:	b4 9f       	mul	r27, r20
 2ec:	90 0d       	add	r25, r0
 2ee:	a4 9f       	mul	r26, r20
 2f0:	80 0d       	add	r24, r0
 2f2:	91 1d       	adc	r25, r1
 2f4:	11 24       	eor	r1, r1
 2f6:	08 95       	ret

000002f8 <__umulhisi3>:
 2f8:	a2 9f       	mul	r26, r18
 2fa:	b0 01       	movw	r22, r0
 2fc:	b3 9f       	mul	r27, r19
 2fe:	c0 01       	movw	r24, r0
 300:	a3 9f       	mul	r26, r19
 302:	70 0d       	add	r23, r0
 304:	81 1d       	adc	r24, r1
 306:	11 24       	eor	r1, r1
 308:	91 1d       	adc	r25, r1
 30a:	b2 9f       	mul	r27, r18
 30c:	70 0d       	add	r23, r0
 30e:	81 1d       	adc	r24, r1
 310:	11 24       	eor	r1, r1
 312:	91 1d       	adc	r25, r1
 314:	08 95       	ret

00000316 <__itoa_ncheck>:
 316:	bb 27       	eor	r27, r27
 318:	4a 30       	cpi	r20, 0x0A	; 10
 31a:	31 f4       	brne	.+12     	; 0x328 <__itoa_ncheck+0x12>
 31c:	99 23       	and	r25, r25
 31e:	22 f4       	brpl	.+8      	; 0x328 <__itoa_ncheck+0x12>
 320:	bd e2       	ldi	r27, 0x2D	; 45
 322:	90 95       	com	r25
 324:	81 95       	neg	r24
 326:	9f 4f       	sbci	r25, 0xFF	; 255
 328:	0c 94 c8 01 	jmp	0x390	; 0x390 <__utoa_common>

0000032c <__ltoa_ncheck>:
 32c:	bb 27       	eor	r27, r27
 32e:	2a 30       	cpi	r18, 0x0A	; 10
 330:	51 f4       	brne	.+20     	; 0x346 <__ltoa_ncheck+0x1a>
 332:	99 23       	and	r25, r25
 334:	42 f4       	brpl	.+16     	; 0x346 <__ltoa_ncheck+0x1a>
 336:	bd e2       	ldi	r27, 0x2D	; 45
 338:	90 95       	com	r25
 33a:	80 95       	com	r24
 33c:	70 95       	com	r23
 33e:	61 95       	neg	r22
 340:	7f 4f       	sbci	r23, 0xFF	; 255
 342:	8f 4f       	sbci	r24, 0xFF	; 255
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__ultoa_common>

0000034a <__ultoa_ncheck>:
 34a:	bb 27       	eor	r27, r27

0000034c <__ultoa_common>:
 34c:	fa 01       	movw	r30, r20
 34e:	a6 2f       	mov	r26, r22
 350:	62 17       	cp	r22, r18
 352:	71 05       	cpc	r23, r1
 354:	81 05       	cpc	r24, r1
 356:	91 05       	cpc	r25, r1
 358:	33 0b       	sbc	r19, r19
 35a:	30 fb       	bst	r19, 0
 35c:	66 f0       	brts	.+24     	; 0x376 <__ultoa_common+0x2a>
 35e:	aa 27       	eor	r26, r26
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	88 1f       	adc	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	aa 1f       	adc	r26, r26
 36a:	a2 17       	cp	r26, r18
 36c:	10 f0       	brcs	.+4      	; 0x372 <__ultoa_common+0x26>
 36e:	a2 1b       	sub	r26, r18
 370:	63 95       	inc	r22
 372:	38 50       	subi	r19, 0x08	; 8
 374:	a9 f7       	brne	.-22     	; 0x360 <__ultoa_common+0x14>
 376:	a0 5d       	subi	r26, 0xD0	; 208
 378:	aa 33       	cpi	r26, 0x3A	; 58
 37a:	08 f0       	brcs	.+2      	; 0x37e <__ultoa_common+0x32>
 37c:	a9 5d       	subi	r26, 0xD9	; 217
 37e:	a1 93       	st	Z+, r26
 380:	36 f7       	brtc	.-52     	; 0x34e <__ultoa_common+0x2>
 382:	b1 11       	cpse	r27, r1
 384:	b1 93       	st	Z+, r27
 386:	10 82       	st	Z, r1
 388:	ca 01       	movw	r24, r20
 38a:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <strrev>

0000038e <__utoa_ncheck>:
 38e:	bb 27       	eor	r27, r27

00000390 <__utoa_common>:
 390:	fb 01       	movw	r30, r22
 392:	55 27       	eor	r21, r21
 394:	aa 27       	eor	r26, r26
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	aa 1f       	adc	r26, r26
 39c:	a4 17       	cp	r26, r20
 39e:	10 f0       	brcs	.+4      	; 0x3a4 <__utoa_common+0x14>
 3a0:	a4 1b       	sub	r26, r20
 3a2:	83 95       	inc	r24
 3a4:	50 51       	subi	r21, 0x10	; 16
 3a6:	b9 f7       	brne	.-18     	; 0x396 <__utoa_common+0x6>
 3a8:	a0 5d       	subi	r26, 0xD0	; 208
 3aa:	aa 33       	cpi	r26, 0x3A	; 58
 3ac:	08 f0       	brcs	.+2      	; 0x3b0 <__utoa_common+0x20>
 3ae:	a9 5d       	subi	r26, 0xD9	; 217
 3b0:	a1 93       	st	Z+, r26
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	79 f7       	brne	.-34     	; 0x394 <__utoa_common+0x4>
 3b6:	b1 11       	cpse	r27, r1
 3b8:	b1 93       	st	Z+, r27
 3ba:	11 92       	st	Z+, r1
 3bc:	cb 01       	movw	r24, r22
 3be:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <strrev>

000003c2 <strrev>:
 3c2:	dc 01       	movw	r26, r24
 3c4:	fc 01       	movw	r30, r24
 3c6:	67 2f       	mov	r22, r23
 3c8:	71 91       	ld	r23, Z+
 3ca:	77 23       	and	r23, r23
 3cc:	e1 f7       	brne	.-8      	; 0x3c6 <strrev+0x4>
 3ce:	32 97       	sbiw	r30, 0x02	; 2
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <strrev+0x18>
 3d2:	7c 91       	ld	r23, X
 3d4:	6d 93       	st	X+, r22
 3d6:	70 83       	st	Z, r23
 3d8:	62 91       	ld	r22, -Z
 3da:	ae 17       	cp	r26, r30
 3dc:	bf 07       	cpc	r27, r31
 3de:	c8 f3       	brcs	.-14     	; 0x3d2 <strrev+0x10>
 3e0:	08 95       	ret

000003e2 <_exit>:
 3e2:	f8 94       	cli

000003e4 <__stop_program>:
 3e4:	ff cf       	rjmp	.-2      	; 0x3e4 <__stop_program>
